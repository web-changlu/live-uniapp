<template>
	<view class="page-container">
		<!-- 背景图片 -->
		<image class="background-image" src="@/static/images/bg1.jpg" mode="aspectFill"></image>

		<!-- 内容区域 -->
		<view class="content">
			<text class="page-title">开播设置</text>

			<!-- 表单区域 -->
			<view class="form">
				<view class="form-item">
					<text class="form-label">标题</text>
					<input class="form-input" v-model="liveTitle" placeholder="请输入开播标题" />
				</view>

				<view class="form-item">
					<text class="form-label">描述</text>
					<textarea class="form-textarea" v-model="liveDescription" placeholder="请输入开播描述"></textarea>
				</view>

				<view class="form-item">
					<text class="form-label">封面</text>
					<button class="form-button" @click="selectCover">选择封面</button>
					<image v-if="coverImage" :src="coverImage" class="cover-image" />
				</view>
			</view>

			<!-- 开始直播按钮 -->
			<view class="action-area">
				<button class="start-button" @click="startLive">开始直播</button>
			</view>
		</view>
	</view>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';
import permision from "@/TrtcCloud/permission.js";
import genTestUserSig from '@/debug/GenerateTestUserSig';
import { useLiveStore } from '@/store/modules/live';
import { useUserStore } from '@/store/modules/user';
import { useTrtcStore } from '@/store/modules/trtc';

// 使用store
console.log(useLiveStore, 'useLiveStore')
const liveStore = useLiveStore();
const userStore = useUserStore();
const trtcStore = useTrtcStore();

const liveTitle = ref('');
const liveDescription = ref('');
const coverImage = ref('');
const userId = ref('user_' + Math.floor(Math.random() * 100000).toString());

const selectCover = () => {
	uni.chooseImage({
		count: 1,
		sizeType: ['original', 'compressed'],
		sourceType: ['album', 'camera'],
		success: (res) => {
			coverImage.value = res.tempFilePaths[0];
		},
	});
};

const startLive = async () => {
	if (!liveTitle.value || !liveDescription.value) {
		uni.showToast({
			title: '请填写完整信息',
			icon: 'none',
		});
		return;
	}

	// 显示加载中
	uni.showLoading({
		title: '准备直播中...'
	});

	try {
		// 初始化TRTC
		await trtcStore.initTrtc();

		// 开始直播
		const liveResult = await liveStore.startLive({
			title: liveTitle.value,
			description: liveDescription.value,
			coverImage: coverImage.value,
			userId: userStore.userId,
			userName: userStore.userName,
			userAvatar: userStore.userAvatar
		});

		if (!liveResult.success) {
			throw new Error(liveResult.error || '开始直播失败');
		}

		// 加入TRTC房间
		const roomId = liveResult.liveId;
		const joinResult = await trtcStore.joinRoom({
			roomId,
			userId: userStore.userId,
			userSig: userStore.userInfo.userSig,
			sdkAppId: userStore.userInfo.sdkAppId,
			role: 'anchor' // 作为主播加入
		});

		if (!joinResult.success) {
			throw new Error(joinResult.error || '加入房间失败');
		}

		// 隐藏加载中
		uni.hideLoading();

		// 显示成功提示
		uni.showToast({
			title: '直播开始',
			icon: 'success',
		});

		// 跳转到直播详情页
		uni.navigateTo({
			url: `/pages/live/detail/index?roomId=${roomId}`
		});
	} catch (error) {
		// 隐藏加载中
		uni.hideLoading();

		// 显示错误提示
		uni.showToast({
			title: error.message || '开始直播失败',
			icon: 'none',
		});

		// 重置直播状态
		liveStore.resetLiveState();

		// 销毁TRTC
		trtcStore.destroyTrtc();
	}
};

const checkPermission = () => {
	if (uni.getSystemInfoSync().platform === 'android') {
		permision.requestAndroidPermission('android.permission.RECORD_AUDIO');
		permision.requestAndroidPermission('android.permission.CAMERA');
	}
}

const getUserSig = () => {
	// 生成 userSig
	const { sdkAppId: testAppId, userSig: testUserSign } = genTestUserSig(userId.value);

	// 登录用户
	userStore.login({
		userId: userId.value,
		userName: `用户${userId.value.substring(5)}`,
		userSig: testUserSign,
		sdkAppId: testAppId,
		permissions: {
			canLive: true,
			canComment: true,
			canSendGift: true
		}
	});

	if (!testAppId || !testUserSign) {
		uni.showToast({
			title: '请填写 sdkAppId、userSig',
			icon: 'none'
		});
	}
}

onMounted(() => {
	checkPermission();
	getUserSig();
})
</script>

<style>
/* 页面容器 */
.page-container {
	flex: 1;
	position: relative;
	width: 750rpx;
	height: 100vh;
	overflow: hidden; /* 防止内容溢出 */
}

/* 背景图片 - 确保完全覆盖全屏 */
.background-image {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	z-index: -1;
	opacity: 0.85; /* 调整不透明度 */
}

/* 内容区域 */
.content {
	flex: 1;
	padding: 30rpx;
	flex-direction: column;
	width: 750rpx;
	height: 100vh;
	position: relative; /* 确保内容在背景之上 */
	z-index: 1;
}

/* 页面标题 */
.page-title {
	font-size: 40rpx;
	font-weight: bold;
	color: #FFFFFF;
	text-align: center;
	margin-top: 60rpx;
	margin-bottom: 40rpx;
}

/* 表单区域 - 更换配色 */
.form {
	background-color: rgba(222, 225, 240, 0.1); /* 深蓝色半透明背景 */
	border-radius: 20rpx;
	padding: 30rpx;
	margin-bottom: 40rpx;
	width: 690rpx; /* 考虑到父容器的padding */
}

/* 表单项 */
.form-item {
	margin-bottom: 30rpx;
}

/* 表单标签 */
.form-label {
	font-size: 28rpx;
	color: #E0E0FF; /* 浅蓝色文字 */
	margin-bottom: 15rpx;
	font-weight: 500;
}

/* 表单输入框 */
.form-input {
	background-color: rgba(255, 255, 255, 0.9);
	border-radius: 10rpx;
	padding: 20rpx;
	font-size: 28rpx;
	border: 1px solid;
	border-color: rgba(255, 255, 255, 0.3);
	width: 630rpx;
	height: 90rpx;
}

/* 表单文本域 */
.form-textarea {
	background-color: rgba(255, 255, 255, 0.9);
	border-radius: 10rpx;
	padding: 20rpx;
	font-size: 28rpx;
	height: 200rpx;
	width: 630rpx;
	border: 1px solid rgba(255, 255, 255, 0.3);
}

/* 表单按钮 */
.form-button {
	background-color:rgb(215, 233, 242); /* 蓝紫色按钮 */
	color: #FFFFFF;
	border-radius: 10rpx;
	font-size: 28rpx;
	margin-bottom: 20rpx;
	box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	width: 150rpx;
	height: 100px;
}

/* 封面图片 - 改为正方形 */
.cover-image {
	width: 300rpx;
	height: 300rpx;
	border-radius: 10rpx;
	border: 2px solid rgba(255, 255, 255, 0.5);
}

/* 操作区域 */
.action-area {
	align-items: center;
	margin-top: 40rpx;
	width: 750rpx;
	display: flex;
	justify-content: center;
}

/* 开始按钮 */
.start-button {
	background-color: #FF5722;
	color: #FFFFFF;
	border-radius: 999rem;
	width: 300rpx;
	font-weight: bold;
}
</style>